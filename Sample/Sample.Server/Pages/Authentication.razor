@page "/login"
@using EFCAT.Model.Data.Annotation
@using EFCAT.Service.Authentication
@using Sample.Model.Entity
@using Sample.Server.Services
@inject NavigationManager _navigationManager

<h3>Login</h3>

<AuthorizeView>
    <Authorized Context="AuthContext">
        Auth
        @Account.Name
        <button @onclick=@(() => AuthService.LogoutAsync().ContinueWith((a) => _navigationManager.NavigateTo("/", forceLoad: true)))>Logout</button>
    </Authorized>
    <NotAuthorized Context="NoAuthContext">
        No Auth
        <EditForm Model="Login" OnValidSubmit="ExecuteLogin">
            <h3 class="title">Registration</h3>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input type="text" @bind-value="Login.Identifier" placeholder="Identifier" />
            <input type="text" @bind-value="Login.Password" placeholder="Password" />
            <button>Submit</button>
        </EditForm>
        <EditForm Model="Register" OnValidSubmit="ExecuteRegister">
            <h3 class="title">Registration</h3>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input type="text" @bind-value="Register.Name" placeholder="Name" />
            <input type="text" @bind-value="Register.Email" placeholder="Email" />
            <input type="text" @bind-value="Register.Password" placeholder="Password" />
            <input type="text" @bind-value="Register.RepeatPassword" placeholder="Repeat" />
            <button>Submit</button>
        </EditForm>
    </NotAuthorized>
    <Authorizing>
        Authorizing...
    </Authorizing>
</AuthorizeView>

@code {
    [CascadingParameter] IAuthenticationService<User> AuthService { get; set; }
    [CascadingParameter] User Account { get; set; }

    public LoginForm Login { get; set; } = new LoginForm();
    public RegisterForm Register { get; set; } = new RegisterForm();

    private void ExecuteLogin() => _navigationManager.NavigateTo("/", forceLoad: true);
    private void ExecuteRegister() => _navigationManager.NavigateTo("/", forceLoad: true);

    [Authentication("REGISTER", ErrorMessage = "Something went wrong. Please try again later.")]
    public class RegisterForm : User {
        [Compare("Password", ErrorMessage = "No matching Passwords!")]
        [Nullable(false)]
        public string RepeatPassword { get; set; }
    }

    [Authentication("LOGIN", ErrorMessage = "Identifier or Password incorrect.")]
    public class LoginForm {
        [Substitute("Name", "Email")]
        [Nullable(false)]
        public string Identifier { get; set; }

        [Nullable(false)]
        public string Password { get; set; }
    }
}
