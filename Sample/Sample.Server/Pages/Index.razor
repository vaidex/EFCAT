@page "/"
@using Domain.Repository
@using EFCAT.Model.Annotation
@using EFCAT.Model.Data
@using EFCAT.Model.Data.Annotation
@using Sample.Model.Entity
@using EFCAT.Service.Component.Input
@inject ITestAsyncRepository _repository

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

@if (Entities != null) {
    <table>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Number</th>
            <th>Type</th>
        </tr>

        @foreach (User entity in Entities) {
            <tr>
                <td>@entity.Id</td>
                <td>@entity.Name</td>
                <td>@entity.Password</td>
            </tr>
        }
    </table>

    <hr />
    @if (Entities.Any()) {
        <EditForm Model=com>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <span>Password Verification</span>
            <input @bind-value=com.ComparePassword />
            <button>submit</button>
        </EditForm>
    }
}

<hr />
<EditForm Model=Entity OnValidSubmit=Submit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <input type="text" @bind-value=Entity.Name placeholder="Name" />
    <input type="text" @bind-value=Entity.Password placeholder="Password" />
    <!--
    <input type="number" @bind-value=Entity.Number placeholder="Number" />
    <select>
    @foreach (var value in Enum.GetValues(typeof(ETypes))) {
            <option @onselectionchange=@(() => Entity.Type = (ETypes)Enum.ToObject(typeof(ETypes), value) )>@value</option>
    }
    </select>-->
    <button>submit</button>
</EditForm>
<hr />
<Number @bind-Value=Value Unit="%" />
<hr />
<EditForm Model=Ex>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <input type="text" @bind-value=Ex.Username placeholder="Name" />
    <button>submit</button>
</EditForm>

@code {
    List<User> Entities { get; set; }

    User Entity { get; set; } = new User();

    string Password { get; set; } = "";

    int Value { get; set; } = 0;

    TestExist Ex { get; set; } = new TestExist();

    Comparison com { get; set; } = new Comparison();

    protected async override Task OnInitializedAsync() {
        Entities = (await _repository.ReadAllAsync()).ToList();
        if (Entities.Any()) {
            com = new Comparison() { CurrentPassword = Entities[0].Password };
        }
        Entity = new User();
    }

    private async Task Submit() {
        Entity = await _repository.CreateAsync(Entity);
        Entities.Add(Entity);
        Entity = new User();
    }

    private class TestExist {
        [Exist(typeof(User), "Name")]
        public string Username { get; set; }
    }

    private class Comparison {
        public Crypt<SHA256> CurrentPassword { get; set; }
        [Compare("CurrentPassword", ErrorMessage = "Wrong!")]
        public string ComparePassword { get; set; }
    }
}